<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_preprocess_page().
 */
function evc_preprocess_page(&$variables) {
  // Fix for toolbar changing body padding.
  if (\Drupal::currentUser()->hasPermission('access toolbar')) {
    $variables['#attached']['library'][] = 'evc/toolbar';
  }
  $variables['#attached']['drupalSettings']['evc_selectors'] = theme_get_setting('evc_selectors');

  $route_match = \Drupal::routeMatch();
  // Check to see if our banner is set on our page.
  if ($route_match->getRouteName() === 'entity.node.canonical' || $route_match->getRouteName() === 'layout_builder.overrides.node.view') {
    $node = $route_match->getParameter('node');
    if ($node instanceof NodeInterface) {
      $variables['node'] = $node;
      if ($node->hasField('field_banner')) {
        $page_hero = $node->get('field_banner');
        if (!empty($page_hero->target_id)) {
          $variables['has_banner'] = TRUE;
        }
      }
    }
  }

}

/**
 * Implements hook_preprocess_image().
 */
function evc_preprocess_image(&$vars) {
  $vars['attributes']['class'][] = 'img-fluid';
}

/**
 * Implements hook_preprocess_table().
 */
function evc_preprocess_table(&$variables) {
  $variables['attributes']['class'][] = 'table';
}

/**
 * Implements hook_preprocess_table().
 */
function evc_preprocess_views_view_table(&$variables) {
  $variables['attributes']['class'][] = 'table';
  $variables['attributes']['class'][] = 'table-striped';
}

/**
 * Implements hook_preprocess_input().
 */
function evc_preprocess_input(&$variables) {
  if ($variables['element']['#type'] === 'submit') {

    if ($variables['element']['#value'] === 'Preview') {
      $variables['attributes']['class'][] = 'btn-secondary';
    }

    if (!in_array('btn', $variables['attributes']['class'])) {
      $variables['attributes']['class'][] = 'btn';
    }

    if (empty(array_intersect([
      'btn-primary',
      'btn-primary-lighter',
      'btn-secondary',
      'btn-success',
      'btn-warning',
      'btn-danger',
      'btn-link',
      'btn-info',
    ], $variables['attributes']['class']))) {
      $variables['attributes']['class'][] = 'btn-secondary';
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function evc_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = Drupal::routeMatch()->getParameter('node')) {
    if (is_string($node) || is_int($node)) {
      $node = Node::load((int) $node);
    }

    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function evc_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_node().
 */
function evc_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node instanceof NodeInterface) {
    $view_mode = $variables['view_mode'];
    if ($view_mode == 'banner') {
      $banner = $node->get('field_banner')->referencedEntities();
      if (!empty($banner[0])) {
        $variables['block_uuid'] = 'block_content:' . $banner[0]->uuid();
        $variables['block_title'] = $banner[0]->label();
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter.
 */
function evc_theme_suggestions_form_alter(array &$suggestions, array $variables) {

  if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {
    $original_theme_hook = $variables['theme_hook_original'];
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);
  }

  return $suggestions;
}
